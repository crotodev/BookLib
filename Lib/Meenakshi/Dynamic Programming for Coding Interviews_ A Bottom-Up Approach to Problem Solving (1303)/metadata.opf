<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">1303</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">d8c07519-8c17-44ca-95b5-2d7c6e617c3d</dc:identifier>
        <dc:title>Dynamic Programming for Coding Interviews: A Bottom-Up Approach to Problem Solving</dc:title>
        <dc:creator opf:file-as="Meenakshi &amp; Rawat, Kamal" opf:role="aut">Meenakshi</dc:creator>
        <dc:creator opf:file-as="Meenakshi &amp; Rawat, Kamal" opf:role="aut">Kamal Rawat</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (6.21.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2017-01-01T05:00:00+00:00</dc:date>
        <dc:description>&lt;div&gt;
&lt;p&gt;I wanted to compute 80th term of the Fibonacci series. I wrote the rampant recursive function, &lt;br&gt;int fib(int n){ &lt;br&gt;return (1==n || 2==n) ? 1 : fib(n-1) + fib(n-2); &lt;br&gt;} &lt;br&gt;and waited for the result. I wait… and wait… and wait… &lt;br&gt;With an 8GB RAM and an Intel i5 CPU, why is it taking so long? I terminated the process and tried computing the 40th term. It took about a second. I put a check and was shocked to find that the above recursive function was called 204,668,309 times while computing the 40th term. &lt;br&gt;More than 200 million times? Is it reporting function calls or scam of some government? &lt;br&gt;The Dynamic Programming solution computes 100th Fibonacci term in less than fraction of a second, with a single function call, taking linear time and constant extra memory. &lt;br&gt;A recursive solution, usually, neither pass all test cases in a coding competition, nor does it impress the interviewer in an interview of company like Google, Microsoft, etc. &lt;br&gt;The most difficult questions asked in competitions and interviews, are from dynamic programming. This book takes Dynamic Programming head-on. It first explain the concepts with simple examples and then deep dives into complex DP problems.&lt;/p&gt;&lt;/div&gt;</dc:description>
        <dc:publisher>Notion Press</dc:publisher>
        <dc:identifier opf:scheme="AMAZON">B01N4P93O7</dc:identifier>
        <dc:identifier opf:scheme="GOODREADS">34394300</dc:identifier>
        <dc:language>eng</dc:language>
        <meta name="calibre:rating" content="8"/>
        <meta name="calibre:timestamp" content="2023-03-04T02:43:35+00:00"/>
        <meta name="calibre:title_sort" content="Dynamic Programming for Coding Interviews: A Bottom-Up Approach to Problem Solving"/>
        <meta name="calibre:user_metadata:#solutions" content="{&quot;table&quot;: &quot;custom_column_1&quot;, &quot;column&quot;: &quot;value&quot;, &quot;datatype&quot;: &quot;text&quot;, &quot;is_multiple&quot;: null, &quot;kind&quot;: &quot;field&quot;, &quot;name&quot;: &quot;Solutions&quot;, &quot;search_terms&quot;: [&quot;#solutions&quot;], &quot;label&quot;: &quot;solutions&quot;, &quot;colnum&quot;: 1, &quot;display&quot;: {&quot;use_decorations&quot;: false, &quot;description&quot;: &quot;&quot;}, &quot;is_custom&quot;: true, &quot;is_category&quot;: true, &quot;link_column&quot;: &quot;value&quot;, &quot;category_sort&quot;: &quot;value&quot;, &quot;is_csp&quot;: false, &quot;is_editable&quot;: true, &quot;rec_index&quot;: 22, &quot;#value#&quot;: null, &quot;#extra#&quot;: null, &quot;is_multiple2&quot;: {}}"/>
    </metadata>
    <guide>
        <reference type="cover" title="Cover" href="cover.jpg"/>
    </guide>
</package>
